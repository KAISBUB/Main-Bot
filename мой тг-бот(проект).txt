import redis
# Импортирует библиотеку redis для работы с базой данных Redis.
import requests
# Импортирует библиотеку requests для отправки HTTP-запросов.
import os
# Импортирует библиотеку os для работы с операционной системой, в частности с переменными окружения.
import time
# Импортирует библиотеку time для работы со временем.
import logging
# Импортирует библиотеку logging для логирования событий.
import asyncio
# Импортирует библиотеку asyncio для асинхронного программирования.
from aiohttp import web
# Импортирует `web` из `aiohttp` для создания веб-сервера.
from flask import Flask, request
# Импортирует `Flask` и `request` из `flask` для создания веб-сервера.
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
# Импортирует классы `Update`, `InlineKeyboardButton`, и `InlineKeyboardMarkup` из `telegram` для работы с Telegram ботом.
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
# Импортирует классы и функции из `telegram.ext` для создания Telegram бота.
from dotenv import load_dotenv
# Импортирует функцию `load_dotenv` из `dotenv` для загрузки переменных окружения из файла .env.
import jwt
# Импортирует библиотеку jwt для работы с JWT-токенами.
import hashlib
# Импортирует библиотеку hashlib для хеширования.

# Загружаем переменные из .env файла
load_dotenv()
# Вызывает функцию `load_dotenv` для загрузки переменных окружения из файла .env.

# Настройки Redis
redis_client = redis.StrictRedis(host='localhost', port=6379, db=0)
# Создает клиент Redis для работы с базой данных Redis по указанным адресу, порту и базе данных.

# URL для API
SERVER_URL = "http://loving-beetle-sharing.ngrok-free.app"  # URL сервера, замените на свой
# Определяет константу `SERVER_URL` с URL-адресом вашего сервера
ADMIN_JWT_TOKEN = os.getenv('JWT_TOKEN')  # Токен из файла .env
# Определяет константу `ADMIN_JWT_TOKEN` с значением токена администратора, полученным из переменных окружения (из файла `.env`)

# Состояния для аутентификации
ASK_EMAIL, ASK_PASSWORD = range(2)
# Определяет состояния для процесса аутентификации (ASK_EMAIL - запрос email, ASK_PASSWORD - запрос пароля).

def generate_token(email: str, secret: str) -> str:
    """Генерирует JWT-токен на основе email"""
    payload = {'email': email}  # Payload (тело) JWT токена
    # Создает словарь, где email пользователя является полезной нагрузкой (payload) для JWT.
    return jwt.encode(payload, secret, algorithm="HS256")  # Кодируем токен
    # Кодирует токен в формате JWT, используя переданный алгоритм HS256.

def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /login без параметров."""
    chat_id = update.effective_chat.id  # Получаем chat_id пользователя
    # Получает chat_id пользователя из объекта `update`.

    # Проверяем, есть ли chat_id в Redis
    user_status = redis_client.get(chat_id)
    # Получает статус пользователя (если есть) из Redis по chat_id.

    if user_status is None:
    # Если статус пользователя не найден в Redis, это означает, что пользователь не авторизован.
        # Если ключа нет, отправляем сообщение о том, что пользователь не авторизован
        update.message.reply_text(
            "Вы не заголинены! Пожалуйста, авторизуйтесь через:\n"
            "- GitHub\n"
            "- Яндекс ID\n"
            "- Введите код (например: /login <email> <password>)"
        )
        # Отправляет пользователю сообщение о том, что он не авторизован.
    else:
        # Если пользователь уже авторизован, уведомляем его
        update.message.reply_text("Вы уже авторизованы.")
        # Если статус пользователя есть в Redis, то отправляет пользователю сообщение о том, что он уже авторизован.

async def login_with_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработчик команды /login с email и password."""
    chat_id = update.effective_chat.id
    # Получает chat_id пользователя из объекта `update`.
    try:
    # Обрабатывает возможные исключения в коде.
        parts = update.message.text.split()
        # Разделяет текст сообщения пользователя на список слов.
        if len(parts) != 3:
        # Проверяет, что список слов содержит ровно 3 элемента (команда, email, password).
            await update.message.reply_text("Неверный формат ввода. Используйте: /login <email> <password>")
            # Если формат ввода неверный, отправляет сообщение об ошибке.
            return
            # Завершает обработку функции, если формат ввода неверный.
        email = parts[1]
        # Извлекает email пользователя из списка слов.
        password = parts[2]
         # Извлекает пароль пользователя из списка слов.
		#Генерация токена - ключевой момент
        token = generate_token(email)
        # Генерирует JWT токен, вызывая функцию `generate_token` с email пользователя.

        # Проверка подлинности на сервере
        async with aiohttp.ClientSession() as session:
         # Создает сессию aiohttp для отправки HTTP запросов.
            async with session.post(f"{SERVER_URL}/api/auth/verify", json={"token": token, "email": email}) as response:
            # Отправляет POST запрос на сервер для проверки токена.
                if response.status == 200:
                # Если запрос к серверу выполнен успешно (код 200)
                    data = await response.json()
                     # Получает JSON ответ от сервера.
                    role = data.get('role')
                     # Извлекает роль пользователя из JSON ответа.
                    redis_client.set(chat_id, f"Authenticated:{token}:{role}")
                    # Сохраняет в Redis статус пользователя в формате "Authenticated:<токен>:<роль>" по chat_id.
                    await update.message.reply_text(f"Вы авторизованы как {role}!")
                    # Отправляет пользователю сообщение об успешной авторизации и его роли.
                else:
                    await update.message.reply_text("Ошибка авторизации. Попробуйте еще раз.")
                    # Если при запросе произошла ошибка, то выводим сообщение пользователю.

    except Exception as e:
    # Если при выполнении кода в блоке `try` возникло исключение
        print(f"Ошибка при авторизации: {e}")
        # Выводит сообщение об ошибке в консоль.
        await update.message.reply_text("Произошла ошибка. Пожалуйста, попробуйте снова.")
        # Отправляет пользователю сообщение об ошибке.

async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Запуск процесса аутентификации через почту и пароль"""
    await update.message.reply_text('Введите вашу почту:') # Запрашивает email
    return ASK_EMAIL # Возвращаем состояние для запроса email

# Сохранение почты пользователя и запрос пароля
async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Запрос почты"""
    user_email = update.message.text.strip() # Получаем email
    if not user_email: # Если email пустой
        await update.message.reply_text('Пожалуйста, введите корректный email.') # Сообщаем об ошибке
        return ASK_EMAIL # Остаемся в состоянии запроса email
    context.user_data['email'] = user_email  # Сохраняем email
    await update.message.reply_text('Введите ваш пароль:') # Запрашиваем пароль
    return ASK_PASSWORD # Переходим в состояние запроса пароля

# Сохранение пароля и аутентификация
async def ask_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Запрос пароля и аутентификация"""
    user_password = update.message.text.strip() # Получаем пароль
    if not user_password: # Если пароль пустой
        await update.message.reply_text('Пожалуйста, введите корректный пароль.') # Сообщаем об ошибке
        return ASK_PASSWORD # Остаемся в состоянии запроса пароля

    email = context.user_data['email']  # Получаем сохраненную почту
    # Отправляем данные на сервер для аутентификации
    role = await authenticate_user(email, user_password) # Аутентифицируем пользователя через authenticate_user

    if role is None: # Если аутентификация не удалась
        await update.message.reply_text('Неверная почта или пароль. Попробуйте еще раз.') # Сообщаем об ошибке
        return ConversationHandler.END  # Завершаем, если ошибка аутентификации

    # Сохраняем роль пользователя
    context.user_data['role'] = role # Сохраняем роль пользователя

    if role == 'admin': # Если роль администратор
        await update.message.reply_text(f'Здравствуйте, {update.message.from_user.first_name}! Вы администратор.') # Отправляем приветствие администратору
    else: # Если обычный пользователь
        await update.message.reply_text(f'Здравствуйте, {update.message.from_user.first_name}! Вы обычный пользователь.') # Отправляем приветствие пользователю

    return ConversationHandler.END  # Завершаем разговор

# Функция, которая проверяет роль пользователя перед выполнением команды
async def restricted_access(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Команда, доступная только администраторам"""
    if 'role' not in context.user_data or context.user_data['role'] != 'admin': # Если роли нет или она не администратор
        await update.message.reply_text('У вас нет доступа к этой команде, потому что вы не администратор.') # Сообщаем об ошибке
    else: # Если роль админ
        await update.message.reply_text('Доступ к админ-команде получен.') # Сообщаем об успехе

# Функция для проверки JWT-токена перед выполнением команды
async def check_jwt_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Проверка JWT-токена перед выполнением команды"""
    if 'role' not in context.user_data or context.user_data['role'] != 'admin': # Если роли нет или она не администратор
        await update.message.reply_text('У вас нет доступа к этой команде, так как вы не администратор.') # Сообщаем об ошибке
    else: # Если роль админ
        # Проверка токена из файла .env
        user_jwt_token = os.getenv('JWT_TOKEN') # Получаем токен из env
        if user_jwt_token != ADMIN_JWT_TOKEN: # Если не совпадает с токеном admin
            await update.message.reply_text('Ваш токен недействителен. Вы не имеете доступа к администраторским функциям.') # Сообщаем об ошибке
        else:
            await update.message.reply_text('JWT-токен проверен. Доступ к админ-команде получен.') # Сообщаем об успехе

# Создаем приложение Flask
app = Flask(__name__)

# Логирование для отладки
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Токен бота
TOKEN = "7413153953:AAHytomJ5muN5O-2x7ipoExC8h6U1YpDzwc"

# Создаем приложение Telegram
application = Application.builder().token(TOKEN).build()

